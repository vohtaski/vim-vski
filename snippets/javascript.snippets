# docstring
snippet /*
	/**
	 * ${1:description}
	 *
	 */${2}
# Comment for function
snippet *f
	/**
	 * ${1:Describe what it does}
	 *
	 * @param {${2:String|Object|Array|Boolean|Number}} ${3:name} ${4:description}
	 * @returns {${5:String|Object|Array|Boolean|Number}} ${6:description}
	 */${7}
# @deprecated
snippet dep
	@deprecated
# @author
snippet aut
	@author ${1:Author}${2}
# @extends
snippet ext 
	@extends ${1:ClassName}${2}
# @private
snippet pri
	@private${2}
# @param
snippet par
	@param {${1:String|Object|Array|Boolean|Number}} ${2:name} ${3:description}${4}
# @requires
snippet req
	@requires ${1:ClassName}${2}
# @returns
snippet ret
	@returns {${1:String|Object|Array|Boolean|Number}} ${2:description}
# @throws
snippet thr
	@throws ${1:ExceptionType}${2}
# Console.log function
snippet log
	console.log(${1:'error'})${2}
# Should equal
snippet .=
	.should.equal(${1:"test"})${2}
# Exports
snippet exp
	exports.${1:functionName} = function ${1}(${3:arg}) {
	  ${4:// body }
	}
# Gently
snippet gently
	gently.expect(${1:Obj}, "${2:func}", function (${3:par}) {
	  ${4:return ""}
	})
# Test not implemented
snippet test
	'test ${1:User.picture}': function () {
	  ${2:"not_implemented".should.equal(true)}
	},
# Object function property
snippet :f
	${1:methodName}: function $1(${2:arg}) {
		${3:// body...}
	},
# Prototype: Obj.f = function f(){}
snippet .f
	${1:.prototype}.${2:methodName} = function $2(${3:arg}) {
		${4:// body...}
	}
# Function
snippet fun
	function ${1:functionName}(${2:arg}) {
		${3:// body...}
	}
# Anonymous Function
snippet f
	function (${1}) {${2}}${3}
# Immediate function
snippet (f
	;(function (${1:arg}) {
		${3:/* code */}
	}(${2}));
# if
snippet if
	if (${1:true}) {
		${2}
	}
# if ... else
snippet ife
	if (${1:true}) {
		${2}
	} else {
		${3}
	}
# tertiary conditional
snippet t
	${1:/* condition */} ? ${2:a} : ${3:b}
# switch
snippet sw
	switch (${1:flag}) {
		case '${3:value}':
			${4:// code}
			break
		${5}
		default:
			${2:// code}
	}
# case
snippet case
	case '${1:case}':
		${2:// code}
		break
	${3}
# for (...) {...}
snippet for
	for (var ${2:i} = 0; $2 < ${1:Things}.length; $2${3: += 1}) {
		${4:$1[$2]}
	}
# for (...) {...} (Improved Native For-Loop)
snippet forr
	for (var ${2:i} = ${1:Things}.length - 1; $2 >= 0; $2${3: -= 1}) {
		${4:$1[$2]}
	}
# while (...) {...}
snippet wh
	while (${1:/* condition */}) {
		${2:/* code */}
	}
# try
snippet try
	try {
		${1:/* code */}
	} catch (${2:e}) {
		${3:/* handle error */}
	}
# do...while
snippet do
	do {
		${2:/* code */}
	} while (${1:/* condition */})
# setTimeout function
snippet timeout
	setTimeout(function () {${3}}${2}, ${1:10});
# Get Elements
snippet get
	getElementsBy${1:TagName}('${2}')${3}
# Get Element
snippet gett
	getElementBy${1:Id}('${2}')${3}
# return
snippet return
	return ${1:result}
# for (property in object ) { ... }
snippet forin
	for (var ${1:prop} in ${2:Things}) {
		${3:$2[$1]}
	}
# hasOwnProperty
snippet has
	hasOwnProperty(${1})
# JSON.parse
snippet jsonp
	JSON.parse(${1:jstr});
# JSON.stringify
snippet jsons
	JSON.stringify(${1:object});
# self-defining function
snippet sdf
	var ${1:function_name} = function (${2:argument}) {
		${3:// initial code ...}

		$1 = function ($2) {
			${4:// main code}
		};
	}
# singleton
snippet sing
	function ${1:Singleton} (${2:argument}) {
		// the cached instance
		var instance;

		// rewrite the constructor
		$1 = function $1($2) {
			return instance;
		};
		
		// carry over the prototype properties
		$1.prototype = this;

		// the instance
		instance = new $1();

		// reset the constructor pointer
		instance.constructor = $1;

		${3:// code ...}

		return instance;
	}
